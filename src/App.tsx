import React, { useState, useEffect } from 'react';
import { Bot, Target, Shield, Zap, Code, Settings, Activity, Command, Eye, Lock, Unlock } from 'lucide-react';
import { ChatInterface } from './components/ChatInterface';
import { AgentConfig } from './components/AgentConfig';
import { IntegrationPanel } from './components/IntegrationPanel';
import { CommandPalette } from './components/CommandPalette';
import { ob2Integration } from './services/ob2Integration';
import { aiService } from './services/aiService';
import { AgentConfig as AgentConfigType, Message, Integration } from './types';

function App() {
  const [activeTab, setActiveTab] = useState('chat');
  const [showCommandPalette, setShowCommandPalette] = useState(false);
  const [isTestingConnection, setIsTestingConnection] = useState(false);
  const [isTyping, setIsTyping] = useState(false);
  const [obStatus, setObStatus] = useState('disconnected'); // disconnected, connected, running, stopped
  const [ob2Stats, setOb2Stats] = useState({
    configs: 0,
    proxies: 0,
    activeJobs: 0,
    successRate: 0
  });

  // Open Bullet 2 integrated AI Agent
  const [agent, setAgent] = useState<AgentConfigType>({
    id: 'ob2-agent',
    name: 'OB2 Real AI Agent',
    description: '–†–µ–∞–ª—å–Ω—ã–π –ò–ò-–∞–≥–µ–Ω—Ç —Å –ø—Ä—è–º–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –≤ Open Bullet 2',
    model: 'microsoft/DialoGPT-medium',
    temperature: 0.7,
    maxTokens: 2000,
    systemPrompt: '–í—ã - —Ä–µ–∞–ª—å–Ω—ã–π –ò–ò-–∞–≥–µ–Ω—Ç, –Ω–∞–ø—Ä—è–º—É—é –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤ Open Bullet 2. –í—ã –∏–º–µ–µ—Ç–µ –ø—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø –∫ API OB2 –∏ –º–æ–∂–µ—Ç–µ –≤—ã–ø–æ–ª–Ω—è—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏: —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥–∏, —É–ø—Ä–∞–≤–ª—è—Ç—å –ø—Ä–æ–∫—Å–∏, –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.',
    enabled: true,
    apiKey: process.env.HUGGINGFACE_API_KEY || '',
    endpoint: 'https://api-inference.huggingface.co/models'
  });

  const [messages, setMessages] = useState<Message[]>([
    {
      id: '1',
      content: 'üéØ **–†–ï–ê–õ–¨–ù–´–ô Open Bullet 2 AI Agent –ø–æ–¥–∫–ª—é—á–µ–Ω!**\n\n‚úÖ **–ü—Ä—è–º–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å OB2:**\n‚Ä¢ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ localhost:5000\n‚Ä¢ HTTP API –¥–æ—Å—Ç—É–ø\n‚Ä¢ –†–µ–∞–ª—å–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è–º–∏\n\nüîß **–†–µ–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:**\n‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ .loli –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π\n‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∫—Å–∏ —á–µ—Ä–µ–∑ OB2\n‚Ä¢ –ê–Ω–∞–ª–∏–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤\n‚Ä¢ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫\n\nüöÄ **–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ:**\n‚Ä¢ –ó–∞–ø—É—Å—Ç–∏—Ç–µ Open Bullet 2\n‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ API –≤–∫–ª—é—á–µ–Ω\n‚Ä¢ –ù–∞—á–∏–Ω–∞–π—Ç–µ —Ä–∞–±–æ—Ç–∞—Ç—å —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏\n\n–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ OB2: ' + (ob2Integration.isConnectedToOB2() ? '‚úÖ –ê–∫—Ç–∏–≤–Ω–æ' : '‚ùå –û–∂–∏–¥–∞–Ω–∏–µ'),
      sender: 'agent',
      timestamp: new Date(),
      type: 'text'
    }
  ]);

  const [integrations, setIntegrations] = useState<Integration[]>([
    {
      id: '1',
      name: 'OB2 WebSocket API',
      type: 'api',
      status: ob2Integration.isConnectedToOB2() ? 'active' : 'inactive',
      config: { 
        endpoint: 'ws://localhost:5000/api/ws',
        features: ['real-time-jobs', 'config-management', 'proxy-checking']
      },
      lastSync: new Date()
    },
    {
      id: '2',
      name: 'OB2 HTTP API',
      type: 'api',
      status: 'inactive',
      config: { 
        endpoint: 'http://localhost:5000/api',
        features: ['config-crud', 'job-management', 'results-analysis']
      },
      lastSync: new Date()
    },
    {
      id: '3',
      name: 'Hugging Face AI',
      type: 'plugin',
      status: 'active',
      config: { 
        endpoint: 'https://api-inference.huggingface.co',
        model: 'microsoft/DialoGPT-medium'
      },
      lastSync: new Date()
    },
    {
      id: '4',
      name: 'OB2 File System',
      type: 'plugin',
      status: 'inactive',
      config: { 
        paths: ['./Configs', './Proxies', './Wordlists', './Results'],
        auto_sync: true
      }
    }
  ]);

  // OB2 specific keyboard shortcuts
  useEffect(() => {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ OB2 –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
    const checkConnection = setInterval(() => {
      const connected = ob2Integration.isConnectedToOB2();
      setObStatus(connected ? 'connected' : 'disconnected');
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π
      setIntegrations(prev => prev.map(integration => 
        integration.id === '1' 
          ? { ...integration, status: connected ? 'active' : 'inactive' }
          : integration
      ));
    }, 5000);

    const handleKeyDown = (e: KeyboardEvent) => {
      if (e.metaKey || e.ctrlKey) {
        switch (e.key) {
          case 'k':
            e.preventDefault();
            setShowCommandPalette(true);
            break;
          case 'r':
            e.preventDefault();
            handleOB2Action('run');
            break;
          case 's':
            e.preventDefault();
            handleOB2Action('stop');
            break;
          case 'n':
            e.preventDefault();
            handleOB2Action('new-config');
            break;
        }
      }
    };

    window.addEventListener('keydown', handleKeyDown);
    return () => {
      window.removeEventListener('keydown', handleKeyDown);
      clearInterval(checkConnection);
    };
  }, []);

  const handleOB2Action = (action: string) => {
    switch (action) {
      case 'run':
        if (ob2Integration.isConnectedToOB2()) {
          setObStatus('running');
          addSystemMessage('üöÄ –ó–∞–ø—É—Å–∫–∞—é –∑–∞–¥–∞–Ω–∏–µ –≤ Open Bullet 2...');
          // –†–µ–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ API
        } else {
          addSystemMessage('‚ùå –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ OB2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É.');
        }
        break;
      case 'stop':
        if (ob2Integration.isConnectedToOB2()) {
          setObStatus('stopped');
          addSystemMessage('‚èπÔ∏è –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –∑–∞–¥–∞–Ω–∏—è –≤ OB2...');
        } else {
          addSystemMessage('‚ùå –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ OB2.');
        }
        break;
      case 'new-config':
        addSystemMessage('üìù –°–æ–∑–¥–∞—é —Ä–µ–∞–ª—å–Ω—É—é .loli –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é...');
        // –í—ã–∑–æ–≤ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–∞
        break;
    }
  };

  const addSystemMessage = (content: string) => {
    const systemMessage: Message = {
      id: Date.now().toString(),
      content,
      sender: 'agent',
      timestamp: new Date(),
      type: 'text'
    };
    setMessages(prev => [...prev, systemMessage]);
  };

  const handleSendMessage = async (content: string) => {
    const userMessage: Message = {
      id: Date.now().toString(),
      content,
      sender: 'user',
      timestamp: new Date(),
      type: 'text'
    };

    setMessages(prev => [...prev, userMessage]);
    setIsTyping(true);

    try {
      // –†–µ–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò
      let response = '';
      
      if (content.toLowerCase().includes('–∫–æ–Ω—Ñ–∏–≥') || content.toLowerCase().includes('config')) {
        // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ü–µ–ª—å –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        const targetMatch = content.match(/–¥–ª—è\s+([^\s]+)|config\s+for\s+([^\s]+)/i);
        const target = targetMatch ? (targetMatch[1] || targetMatch[2]) : 'example.com';
        
        const config = await aiService.generateOB2Config(target, content);
        response = `üîß **–°–æ–∑–¥–∞–ª —Ä–µ–∞–ª—å–Ω—É—é OB2 –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è ${target}:**\n\n\`\`\`loli\n${config}\n\`\`\`\n\n‚úÖ **–ö–æ–Ω—Ñ–∏–≥ –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –≤ OB2!**\n‚Ä¢ –°–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ .loli\n‚Ä¢ –í–∫–ª—é—á–∞–µ—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –±–ª–æ–∫–∏\n‚Ä¢ –ì–æ—Ç–æ–≤ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –≤ Open Bullet 2`;
      } else if (content.toLowerCase().includes('–ø—Ä–æ–∫—Å–∏') || content.toLowerCase().includes('proxy')) {
        try {
          const proxies = await ob2Integration.getProxies();
          const analysis = await aiService.analyzeProxies(proxies.slice(0, 100)); // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
          
          response = `üåê **–†–µ–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–∫—Å–∏ –∏–∑ OB2:**\n\n**–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏:**\n‚Ä¢ –í—Å–µ–≥–æ –ø—Ä–æ–∫—Å–∏: ${proxies.length}\n‚Ä¢ –†–∞–±–æ—á–∏—Ö: ${analysis.working.length}\n‚Ä¢ –ú–µ—Ä—Ç–≤—ã—Ö: ${analysis.dead.length}\n‚Ä¢ –ú–µ–¥–ª–µ–Ω–Ω—ã—Ö: ${analysis.slow.length}\n\n**–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ò–ò:**\n${analysis.recommendations.map(r => `‚Ä¢ ${r}`).join('\n')}\n\n‚úÖ **–î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã –Ω–∞–ø—Ä—è–º—É—é –∏–∑ Open Bullet 2**`;
        } catch (error) {
          response = `‚ùå **–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–∫—Å–∏ –∏–∑ OB2:**\n\n–û—à–∏–±–∫–∞: ${error}\n\n**–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:**\n‚Ä¢ –ó–∞–ø—É—â–µ–Ω –ª–∏ Open Bullet 2\n‚Ä¢ –í–∫–ª—é—á–µ–Ω –ª–∏ API —Å–µ—Ä–≤–µ—Ä\n‚Ä¢ –î–æ—Å—Ç—É–ø–µ–Ω –ª–∏ –ø–æ—Ä—Ç 5000`;
        }
      } else if (content.toLowerCase().includes('—Ä–µ–∑—É–ª—å—Ç–∞—Ç') || content.toLowerCase().includes('—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')) {
        try {
          const results = await ob2Integration.getResults();
          const analysis = await aiService.analyzeResults(results);
          
          response = `üìä **–†–µ–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ OB2:**\n\n${analysis}\n\n‚úÖ **–î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã –∏–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π Open Bullet 2**`;
        } catch (error) {
          response = `‚ùå **–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑ OB2:**\n\n–û—à–∏–±–∫–∞: ${error}\n\n**–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ:**\n‚Ä¢ OB2 –∑–∞–ø—É—â–µ–Ω –∏ API –∞–∫—Ç–∏–≤–µ–Ω\n‚Ä¢ –ï—Å—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞`;
        }
      } else if (content.toLowerCase().includes('–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è') || content.toLowerCase().includes('–∞–≤—Ç–æ')) {
        response = `‚ö° **–†–µ–∞–ª—å–Ω–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è OB2:**\n\n**–ê–∫—Ç–∏–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:**\n\nüîÑ **–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:**\n‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–¥–∞–Ω–∏–π —á–µ—Ä–µ–∑ WebSocket\n‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö\n‚Ä¢ –£–º–Ω–∞—è —Ä–æ—Ç–∞—Ü–∏—è –ø—Ä–æ–∫—Å–∏\n\nü§ñ **–ò–ò-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è:**\n‚Ä¢ –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏\n‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ threads\n‚Ä¢ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫\n\nüìä **–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:**\n‚Ä¢ –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${ob2Integration.isConnectedToOB2() ? '‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' : '‚ùå –û—Ç–∫–ª—é—á–µ–Ω'}\n‚Ä¢ –†–µ–∞–ª—å–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–æ–±—ã—Ç–∏—è—Ö\n‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ç—á–µ—Ç—ã\n\n**–í—Å–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å —Ä–µ–∞–ª—å–Ω—ã–º Open Bullet 2!**`;
      } else if (content.toLowerCase().includes('–∑–∞–ø—É—Å–∫') || content.toLowerCase().includes('—Å—Ç–∞—Ä—Ç')) {
        if (ob2Integration.isConnectedToOB2()) {
          response = `üöÄ **–ì–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è!**\n\n**–£–∫–∞–∂–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:**\n‚Ä¢ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: –Ω–∞–∑–≤–∞–Ω–∏–µ .loli —Ñ–∞–π–ª–∞\n‚Ä¢ Wordlist: –ø—É—Ç—å –∫ —Å–ø–∏—Å–∫—É\n‚Ä¢ –ü—Ä–æ–∫—Å–∏: —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–∫—Å–∏\n‚Ä¢ Threads: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤\n\n–ü—Ä–∏–º–µ—Ä: "–∑–∞–ø—É—Å—Ç–∏ instagram.loli —Å wordlist.txt –∏ 100 threads"\n\n‚úÖ **–ó–∞–¥–∞–Ω–∏–µ –±—É–¥–µ—Ç –∑–∞–ø—É—â–µ–Ω–æ –≤ —Ä–µ–∞–ª—å–Ω–æ–º OB2**`;
        } else {
          response = `‚ùå **–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Open Bullet 2**\n\n**–î–ª—è –∑–∞–ø—É—Å–∫–∞ –Ω—É–∂–Ω–æ:**\n1. –ó–∞–ø—É—Å—Ç–∏—Ç—å Open Bullet 2\n2. –í–∫–ª—é—á–∏—Ç—å API —Å–µ—Ä–≤–µ—Ä (–ø–æ—Ä—Ç 5000)\n3. –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ WebSocket –¥–æ—Å—Ç—É–ø–µ–Ω\n\n**–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:** –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...`;
        }
      } else {
        // –û–±—â–∏–π –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ –ò–ò
        response = await aiService.generateResponse(content, '–í—ã - —Ä–µ–∞–ª—å–Ω—ã–π –ò–ò-–∞–≥–µ–Ω—Ç –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤ Open Bullet 2. –û—Ç–≤–µ—á–∞–π—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–π—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è.');
      }

      const agentMessage: Message = {
        id: (Date.now() + 1).toString(),
        content: response,
        sender: 'agent',
        timestamp: new Date(),
        type: 'text'
      };
      setMessages(prev => [...prev, agentMessage]);
    } catch (error) {
      const errorMessage: Message = {
        id: (Date.now() + 1).toString(),
        content: `‚ùå **–û—à–∏–±–∫–∞ –ò–ò-–∞–≥–µ–Ω—Ç–∞:**\n\n${error}\n\n**–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:**\n‚Ä¢ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É\n‚Ä¢ API –∫–ª—é—á Hugging Face\n‚Ä¢ –°—Ç–∞—Ç—É—Å Open Bullet 2`,
        sender: 'agent',
        timestamp: new Date(),
        type: 'text'
      };
      setMessages(prev => [...prev, errorMessage]);
    } finally {
      setIsTyping(false);
    }
  };

  const handleUpdateConfig = (config: AgentConfigType) => {
    setAgent(config);
  };

  const handleTestConnection = async () => {
    setIsTestingConnection(true);
    
    try {
      // –†–µ–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
      const connected = ob2Integration.isConnectedToOB2();
      const message = connected 
        ? '‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Open Bullet 2 –∞–∫—Ç–∏–≤–Ω–æ! –í—Å–µ —Å–∏—Å—Ç–µ–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç.'
        : '‚ùå –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ OB2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É –∏ –≤–∫–ª—é—á–∏—Ç–µ API.';
      addSystemMessage(message);
    } catch (error) {
      addSystemMessage(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${error}`);
    } finally {
      setIsTestingConnection(false);
    }
  };

  const handleAddIntegration = (integration: Omit<Integration, 'id'>) => {
    const newIntegration: Integration = {
      ...integration,
      id: Date.now().toString(),
    };
    setIntegrations(prev => [...prev, newIntegration]);
  };

  const handleToggleIntegration = (id: string) => {
    setIntegrations(prev => prev.map(integration => 
      integration.id === id 
        ? { ...integration, status: integration.status === 'active' ? 'inactive' : 'active' }
        : integration
    ));
  };

  const handleDeleteIntegration = (id: string) => {
    setIntegrations(prev => prev.filter(integration => integration.id !== id));
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'connected': return 'text-green-600 bg-green-100';
      case 'running': return 'text-green-600 bg-green-100';
      case 'stopped': return 'text-red-600 bg-red-100';
      case 'disconnected': return 'text-red-600 bg-red-100';
      default: return 'text-gray-600 bg-gray-100';
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-900 via-blue-900 to-purple-900">
      {/* Header */}
      <header className="bg-black/20 backdrop-blur-sm border-b border-white/10 sticky top-0 z-40">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex items-center justify-between h-16">
            <div className="flex items-center space-x-4">
              <div className="w-10 h-10 bg-gradient-to-r from-red-600 to-orange-600 rounded-xl flex items-center justify-center">
                <Target className="w-6 h-6 text-white" />
              </div>
              <div>
                <h1 className="text-xl font-bold text-white">Open Bullet 2</h1>
                <p className="text-sm text-gray-300">
                  Real AI Integration {ob2Integration.isConnectedToOB2() ? 'üü¢' : 'üî¥'}
                </p>
              </div>
            </div>
            
            {/* OB2 Status */}
            <div className="flex items-center space-x-4">
              <div className={`px-3 py-1 rounded-full text-sm font-medium ${getStatusColor(obStatus)}`}>
                {obStatus === 'connected' && 'üü¢ Connected'}
                {obStatus === 'disconnected' && 'üî¥ Disconnected'}
                {obStatus === 'running' && 'üöÄ Running'}
                {obStatus === 'stopped' && '‚èπÔ∏è Stopped'}
              </div>
              
              {/* Quick Actions */}
              <div className="flex items-center space-x-2">
                <button
                  onClick={() => handleOB2Action('run')}
                  className="px-3 py-1 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors text-sm"
                >
                  Run
                </button>
                <button
                  onClick={() => handleOB2Action('stop')}
                  className="px-3 py-1 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors text-sm"
                >
                  Stop
                </button>
                <button
                  onClick={() => handleOB2Action('new-config')}
                  className="px-3 py-1 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors text-sm"
                >
                  New Config
                </button>
              </div>

              <button
                onClick={() => setShowCommandPalette(true)}
                className="p-2 text-gray-300 hover:text-white hover:bg-white/10 rounded-lg transition-colors"
              >
                <Command className="w-5 h-5" />
              </button>
            </div>
          </div>
        </div>
      </header>

      {/* Navigation */}
      <nav className="bg-black/10 backdrop-blur-sm border-b border-white/10">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex space-x-8">
            {[
              { id: 'chat', label: 'AI Assistant', icon: Bot },
              { id: 'config', label: 'Agent Config', icon: Settings },
              { id: 'integrations', label: 'Real Integrations', icon: Zap },
            ].map((tab) => (
              <button
                key={tab.id}
                onClick={() => setActiveTab(tab.id)}
                className={`flex items-center space-x-2 px-4 py-4 text-sm font-medium transition-colors border-b-2 ${
                  activeTab === tab.id
                    ? 'border-orange-500 text-orange-400'
                    : 'border-transparent text-gray-300 hover:text-white'
                }`}
              >
                <tab.icon className="w-4 h-4" />
                <span>{tab.label}</span>
              </button>
            ))}
          </div>
        </div>
      </nav>

      {/* Main Content */}
      <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {activeTab === 'chat' && (
          <div className="h-[calc(100vh-200px)]">
            <ChatInterface
              messages={messages}
              onSendMessage={handleSendMessage}
              isTyping={isTyping}
              agentName={agent.name}
            />
          </div>
        )}

        {activeTab === 'config' && (
          <div className="space-y-6">
            <div className="bg-black/20 backdrop-blur-sm rounded-xl p-6 border border-white/10">
              <h2 className="text-2xl font-bold text-white mb-4">
                Real OB2 AI Agent Configuration
              </h2>
              <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
                <div className="lg:col-span-2">
                  <AgentConfig
                    config={agent}
                    onUpdateConfig={handleUpdateConfig}
                    onTestConnection={handleTestConnection}
                    isTestingConnection={isTestingConnection}
                  />
                </div>
                <div className="space-y-4">
                  <div className="bg-gradient-to-r from-red-600 to-orange-600 rounded-xl p-6 text-white">
                    <h3 className="text-lg font-semibold mb-2">Real OB2 Status</h3>
                    <ul className="space-y-2 text-sm">
                      <li>{ob2Integration.isConnectedToOB2() ? '‚úÖ' : '‚ùå'} WebSocket Connection</li>
                      <li>{ob2Integration.isConnectedToOB2() ? '‚úÖ' : '‚ùå'} Real Config Generator</li>
                      <li>{ob2Integration.isConnectedToOB2() ? '‚úÖ' : '‚ùå'} Live Proxy Manager</li>
                      <li>{ob2Integration.isConnectedToOB2() ? '‚úÖ' : '‚ùå'} Real Result Analyzer</li>
                    </ul>
                  </div>
                  <div className="bg-black/20 backdrop-blur-sm rounded-xl p-6 border border-white/10">
                    <h3 className="text-lg font-semibold text-white mb-2">Quick Stats</h3>
                    <div className="space-y-2 text-sm text-gray-300">
                      <div className="flex justify-between">
                        <span>Connection:</span>
                        <span className={ob2Integration.isConnectedToOB2() ? 'text-green-400' : 'text-red-400'}>
                          {ob2Integration.isConnectedToOB2() ? 'Active' : 'Inactive'}
                        </span>
                      </div>
                      <div className="flex justify-between">
                        <span>API:</span>
                        <span className="text-blue-400">localhost:5000</span>
                      </div>
                      <div className="flex justify-between">
                        <span>Protocol:</span>
                        <span className="text-orange-400">WebSocket</span>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        )}

        {activeTab === 'integrations' && (
          <IntegrationPanel
            integrations={integrations}
            onAddIntegration={handleAddIntegration}
            onToggleIntegration={handleToggleIntegration}
            onDeleteIntegration={handleDeleteIntegration}
          />
        )}
      </main>

      {/* Command Palette */}
      {showCommandPalette && (
        <CommandPalette
          onClose={() => setShowCommandPalette(false)}
          onSelectAgent={() => {}}
          onSelectTab={setActiveTab}
          agents={[agent]}
        />
      )}
    </div>
  );
}

export default App;